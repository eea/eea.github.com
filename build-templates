#!/bin/bash

red="\e[1;31m"
green="\e[1;32m"
yellow="\e[1;33m"
blue="\e[1;34m"
NC="\e[0m" # No Color


GUESS_BUILD="../../bin/sphinx-build"


get_abs_path()
{
    local  __resultvar=$2
    local  the_result=$(cd `dirname "$1"` && pwd)/`basename "$1"`
    eval $__resultvar="'$the_result'"
}

eval set -- $(getopt -n $0 -o "" -l "help" -l "debug" -l "clean" -l "package:" -l "commit:" -- "$@")
declare debug clean help package commit
declare -a paths


while [ $# -gt 0 ] ; do
    case "$1" in
    --clean) clean=1 ; shift ;;
    --debug) debug=1 ; shift ;;
     --help) help=1 ; shift ;;
   --commit) shift ; commit="$1" ; shift ;;
  --package) shift ; package="$1" ; shift ;;
         --) shift ;;
         -*) echo "bad option '$1'" ; exit 1 ;;
          *) paths=("${paths[@]}" "$1") ; shift ;;
    esac
done

if [ ! -z "$help" ]; then
    echo "Usage: ./build-templates [options] [--package <package.name>] [/path/to/sphinx-build]"
    echo "When run without arguments, attempts to find sphinx-build in buildout folder (../../) or fails."
    echo "Options:"
    echo "      --package <package.name>    -- build just for the specified package (e.g. --package eea.daviz)"
    echo "      --clean                     -- make clean before building"
    echo "      --commit \"<message>\"        -- commit with message after build"
    echo "      --debug                     -- do nothing, print debug data"
    echo "      --help                      -- print this message"
    exit 0
fi

GIVEN_PATH="${paths[0]}"

if [ -z "$GIVEN_PATH" ]; then
    echo -e "[${blue}I${NC}] sphinx-build not specified, attempting to find it..."
    if [ -f "$GUESS_BUILD" ]; then
        get_abs_path "$GUESS_BUILD" SPHINXBUILD
        echo -e "[${blue}I${NC}] Found in ${green}$SPHINXBUILD${NC} !"
    else
        echo "Need path to sphinx-build executable"
        exit 1
    fi
else
    if [ ! -f "$GIVEN_PATH" ]; then
        echo -e "[${red}E${NC}] ${red}The provided sphinx-build path is invalid!${NC}"
        exit 1
    else
        get_abs_path "$GIVEN_PATH" SPHINXBUILD
    fi
fi

echo "........................................................................................."
echo ""
echo -e "[${blue}I${NC}] Using Sphinx from: ${green}$SPHINXBUILD${NC}"
echo ""

SOURCE_DIR=$(cd "../" && pwd)/

for PACKAGE_DIR in $(find ./src/docs/ -type d -name eea.\*)
do
    PACKAGE_NAME="$(basename "$PACKAGE_DIR")"
    if [ ! -z "$package" ]; then
        if [[ "$PACKAGE_NAME" != "$package" ]]; then
            continue
        fi
    fi
    if [ -f $PACKAGE_DIR/Makefile ]; then
        if [ ! -z "$debug" ]; then
            echo -e "[${yellow}D${NC}] PACKAGE_DIR=$PACKAGE_DIR"
            echo -e "[${yellow}D${NC}] SPHINXBUILD=$SPHINXBUILD"
            echo -e "[${yellow}D${NC}] PACKAGE_NAME=$PACKAGE_NAME"
            echo -e "[${yellow}D${NC}] SOURCE_DIR=$SOURCE_DIR"
        fi
        if [ ! -d "$SOURCE_DIR/$PACKAGE_NAME" ]; then
            echo -e "[${red}W${NC}] Could not find ${red}$PACKAGE_NAME${NC} in ${green}$SOURCE_DIR${NC}. ${red}Skipping build!${NC}"
        else
            if [ -z "$debug" ]; then
                if [ ! -z "$clean" ]; then
                    make -C $PACKAGE_DIR clean SPHINX_PATH=$SPHINXBUILD PACKAGE_NAME=$PACKAGE_NAME SOURCE_DIR=$SOURCE_DIR
                fi
                make -C $PACKAGE_DIR plone-pt SPHINX_PATH=$SPHINXBUILD PACKAGE_NAME=$PACKAGE_NAME SOURCE_DIR=$SOURCE_DIR
                if [ ! -z "$commit" ]; then
                    if [ ! -f "$SOURCE_DIR$PACKAGE_NAME/.git/config" ]; then
                        echo -e "[${blue}I${NC}] Not a git repository! ${blue}Skipping commit!${NC}"
                        continue
                    fi
                    SUBPACKAGE_PATH="$(echo "$PACKAGE_NAME" | sed "s/\./\//g")"
                    "$(
                        cd "$SOURCE_DIR$PACKAGE_NAME/$SUBPACKAGE_PATH";
                        pwd;
                        git add -A documentation;
                        git commit -m "$commit";
                        git push origin master;
                        )"
                fi
            else
                echo -e "[${blue}I${NC}] Debug enabled, doing nothing!"
                echo ""
            fi

        fi
    else
        echo -e "[${blue}I${NC}] No Makefile in $PACKAGE_DIR. ${blue}Skipping!${NC}"
    fi
done
